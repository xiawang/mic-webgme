/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Oct 12 2016 10:17:52 GMT-0500 (CDT).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.metaNodeInfo = [];
        self.treeNodeInfo = [];
        var artifact;
        self.loadNodeMap(self.rootNode)
            .then(function (nodes) {
                self.printChildrenRec(self.rootNode, nodes);
                var res = self.printRecursively(self.rootNode, nodes);
                var metaNodeInfoJson = JSON.stringify(self.metaNodeInfo, null, 4);
                var treeNodeInfoJson = JSON.stringify(res, null, 4);
                artifact = self.blobClient.createArtifact('project-data');
                self.logger.info('nodes number ', Object.keys(nodes).length);
                self.logger.info('res', res);
                return artifact.addFilesAsSoftLinks({
                    'tree.json': treeNodeInfoJson,
                    'meta.json': metaNodeInfoJson
                });
            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                return artifact.save()
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });

    };

    MiniProject2.prototype.loadNodeMap = function (node) {
       var self = this; 
       return self.core.loadSubTree(node)
           .then(function (nodeArr) {
               var nodes = {},
                   i;
               for (i = 0; i < nodeArr.length; i += 1) {
                   nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
               }

               return nodes;
           });
    };

    MiniProject2.prototype.printRandomly = function (nodes) {
        var self = this,
            path,
            name,
            attr,
            metaNode,
            node;

        for (path in nodes) {
            node = nodes[path];
            name = self.core.getAttribute(node, 'name');
        }

    };

    MiniProject2.prototype.printRecursively = function (root, nodes, indent) {
        var self = this,
            path,
            name,
            attr,
            metaNode,
            node,
            childreninfo,
            grandChildren,
            childrenPaths,
            childNode,
            childName,
            i;

        indent = indent || '';

        // result
        var treeNodeInfo_res = {};
        var rootName = self.core.getAttribute(root, 'name');
        treeNodeInfo_res['name'] = rootName;
        self.logger.info(indent, 'name', treeNodeInfo_res['name']);

        if (rootName !== 'ROOT') {
            // isMeta
            if (self.getMetaType(root) === root) {
                treeNodeInfo_res['isMeta'] = true;
            } else {
                treeNodeInfo_res['isMeta'] = false;
            }
            // metaType
            metaNode = self.getMetaType(root);
            if (path !== "") {
                treeNodeInfo_res['metaType'] = self.core.getAttribute(metaNode, 'name');
                var srcPath = self.core.getPointerPath(root, 'src');
                if (srcPath) {
                    var srcNode = nodes[srcPath];
                    treeNodeInfo_res['src'] = self.core.getAttribute(srcNode, 'name');
                }
                var dstPath = self.core.getPointerPath(root, 'dst');
                if (dstPath) {
                    var dstNode = nodes[dstPath];
                    treeNodeInfo_res['dst'] = self.core.getAttribute(dstNode, 'name');
                }
            } else {
                treeNodeInfo_res['metaType'] = null;
            }
        }

        // add root node
        childrenPaths = self.core.getChildrenPaths(root);
        childreninfo = {};

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            childreninfo[childrenPaths[i]] = self.printRecursively(childNode, nodes, indent + '    ');
        }

        treeNodeInfo_res['children'] = childreninfo;
        return treeNodeInfo_res;
    };

    MiniProject2.prototype.printChildrenRec = function (root, nodes, indent) {
        var self = this,
            childrenPaths,
            childNode,
            i;

        indent = indent || '';

        childrenPaths = self.core.getChildrenPaths(root);
        var baseNode = null;
        var baseNodeName = null;

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            // check if the base node exists
            baseNode = self.core.getBaseType(childNode);
            if (baseNode) {
                baseNodeName = self.core.getAttribute(baseNode, 'name');
            }
            var grandChildrenPaths = self.core.getChildrenPaths(childNode);
            self.metaNodeInfo.push({name: self.core.getAttribute(childNode, 'name'), path: self.core.getPath(childNode), nbrOfChildren: grandChildrenPaths.length, base: baseNodeName});
            // add children only if they are meta nodes
            if (self.getMetaType(childNode) === childNode) {
                self.printChildrenRec(childNode, nodes, indent + '  ');
            }
        }

    };

    return MiniProject2;
});
